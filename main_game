import pygame
from pygame.locals import *
import random

pygame.init()

SW, SH = 600, 700
clock = pygame.time.Clock()
fps = 60
flying = False                # so game only starts after clicking
game_over = False
pipe_gap = 160
pipe_frequency = 1500   # milliseconds
last_pipe = pygame.time.get_ticks() - pipe_frequency
score = 0
pass_pipe = False
font = pygame.font.SysFont('Bahaus 93', 60)
white = (255, 255, 255)

screen = pygame.display.set_mode((SW, SH))
pygame.display.set_caption('Flappy Bird Signs')

# ground moving variables
ground_scroll = 0
ground_speed = 4

def draw_score(text, font, text_color, x, y):
    img = font.render(text, True, text_color)
    screen.blit(img, (x, y))

def reset_game():
    pipe_group.empty()
    flappy.rect.x = 100
    flappy.rect.y = int(SH/2)
    score = 0 
    return score

# load images
button_img = pygame.image.load(r'D:\restart.png')
back_ground = pygame.image.load(r"D:\bg.png")
ground = pygame.image.load(r"D:\ground.png")

class Bird(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load(r"D:\avatar (9).png")  # Load your single bird image
        self.rect = self.image.get_rect()
        self.rect.center = [x, y]
        self.vel = 0
        self.clicked = False

    def update(self):
        if flying == True:
            # gravity
            self.vel += 0.5
            if self.vel > 8:                      # so that the vel does not just keep increasing
                self.vel = 8
            if self.rect.bottom < 600:           # so it just stops at the ground and does not fall off the screen
                self.rect.y += int(self.vel)

            if pygame.key.get_pressed()[K_UP] and self.clicked == False:
                self.clicked = True                # sets the click to true so only one flap is counted
                self.vel = -10                     # so it moves upwards

            if not pygame.key.get_pressed()[K_UP]:     # when we release the button the click is returned to false
                self.clicked = False             # so if we keep the button pressed it only counts as a single flap

        # Rotate the bird based on velocity
        if game_over == False:
            self.image = pygame.transform.rotate(pygame.image.load(r"D:\avatar (9).png"), self.vel * -2)
        else:
            self.image = pygame.transform.rotate(pygame.image.load(r"D:\avatar (9).png"), -90)

class Pipe(pygame.sprite.Sprite):
    def __init__(self, x, y, position):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load(r"D:\pipe.png")
        self.rect = self.image.get_rect()

        # if position is 1 then pipe from top if -1 then pipe from bottom
        if position == 1:
            self.image = pygame.transform.flip(self.image, False, True)        # so it flips along y-axis not along x-axis
            self.rect.bottomleft = [x, y - int(pipe_gap / 2)]
        if position == -1:
            self.rect.topleft = [x, y + int(pipe_gap / 2)]

    def update(self):
        self.rect.x -= ground_speed                    # pipe moves with same speed as ground
        if self.rect.right < 0:
            self.kill()

class Button():
    def __init__(self, x, y, image):
        self.image = image
        self.rect = self.image.get_rect()
        self.rect.topleft = (x, y)

    def draw(self):
        action = False
        # get mouse position
        pos = pygame.mouse.get_pos()
        # check if mouse is over a button
        if self.rect.collidepoint(pos):
            if pygame.mouse.get_pressed()[0] == 1:
                action = True
        # draw button
        screen.blit(self.image, (self.rect.x, self.rect.y))
        return action

bird_group = pygame.sprite.Group()        # initialization
pipe_group = pygame.sprite.Group()

flappy = Bird(100, int(SH/2))           # position of flappy bird
bird_group.add(flappy)

button = Button(SW // 2 - 50, SH // 2 - 100, button_img)

run = True

while run:
    clock.tick(fps)
    
    # background image
    screen.blit(back_ground, (0, 0))

    bird_group.draw(screen)                  # inbuilt draw function
    bird_group.update()
    pipe_group.draw(screen)                  # inbuilt draw function
   
    # ground image
    screen.blit(ground, (ground_scroll, 600))  

    if len(pipe_group) > 0:                               # atleast one pipe has been formed
        if bird_group.sprites()[0].rect.left > pipe_group.sprites()[0].rect.left\
        and bird_group.sprites()[0].rect.right < pipe_group.sprites()[0].rect.right\
        and pass_pipe == False:
            pass_pipe = True

        if bird_group.sprites()[0].rect.left > pipe_group.sprites()[0].rect.right and pass_pipe == True:
            score += 1
            pass_pipe = False
        
    draw_score(str(score), font, white, int(SW / 2), 20)

    # collisions check
    if pygame.sprite.groupcollide(bird_group, pipe_group, False, False) or flappy.rect.top < 0:
        game_over = True

    if flappy.rect.bottom >= 600:
        game_over = True

    if game_over == False and flying == True:
       # pipes
       time_now = pygame.time.get_ticks()
       if time_now - last_pipe > pipe_frequency:
            pipe_height = random.randint(-150, 150)

            top_pipe = Pipe(SW, int(SH/2) + pipe_height, 1)
            btm_pipe = Pipe(SW, int(SH/2) + pipe_height, -1)
            
            pipe_group.add(top_pipe)
            pipe_group.add(btm_pipe)

            last_pipe = time_now
        
       ground_scroll -= ground_speed
       if abs(ground_scroll) > 35:
           ground_scroll = 0
        
       pipe_group.update()

    if game_over == True:
        if button.draw() == True:
            game_over = False
            score = reset_game()
            flying = False

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False
        if pygame.key.get_pressed()[K_UP] and flying == False and game_over == False:
            flying = True

    pygame.display.update()

pygame.quit()
